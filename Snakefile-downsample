# Downsample reads and map the downsampled reads to the spike-in standard sequences

#to run snakemake: conda activate snakemake

#set a workflow config file
configfile: "Config/config_example_samples.yaml" ### Update to your config_sample.yaml file
SAMPLE = config["sample"] ### Update to your variable name

#if want to run on just some files
#SAMPLE = ["SPECIFIC_SAMPLE"] ### Update and remove "#" and add a # to the SAMPLE = config["sample"] line above

FRACTION_LABEL = ["20"] ### Randomly selecting 20% of reads
STANDARDS = ["Map_Indexes/Langenfeld_2022_standards"] ### Update with bowtie2 mapping index of spike-in standards (and update rule bowtie and rule depth_bam below)
### depending on your sequencing depth, downsampling more may be warranted ###

rule all_downsample:
    input:
        expand("Mapping/{samp}_{frac_lab}/standards_window49.txt", samp=SAMPLE, frac_lab=FRACTION_LABEL) 

### Downsampling

rule read_count:
    input: 
       "Reads/{sample}_R1.fastq"
    conda:
       "Envs/downsample.yaml"
    output:
       "Reads/{sample}_readcount.txt"
    shell:
       """
       echo $(cat {input} | wc -l)/4 | bc > {output}
       """

rule downsample:
    input:
        R1_reads="Reads/{sample}_R1.fastq",
        R2_reads="Reads/{sample}_R2.fastq",
        read_count="Reads/{sample}_readcount.txt"
    params:
        "100/{fraction_label}"
    conda:
        "Envs/downsample.yaml"
    output:
        down_R1_reads="Reads/{sample}_{fraction_label}_R1.fastq",
        down_R2_reads="Reads/{sample}_{fraction_label}_R2.fastq"
    shell:
        """
        echo $(< {input.read_count})
        echo $(($(< {input.read_count})/{params}))
        seqtk sample -s100 {input.R1_reads} $(($(< {input.read_count})/{params})) > {output.down_R1_reads}
        seqtk sample -s100 {input.R2_reads} $(($(< {input.read_count})/{params})) > {output.down_R2_reads}
        """

### Bowtie2 mapping 

rule bowtie:
    input:
        down_R1_reads="Reads/{sample}_{fraction_label}_R1.fastq",
        down_R2_reads="Reads/{sample}_{fraction_label}_R2.fastq"
    params:
        "Map_Indexes/Langenfeld_2022_standards" ### Update with bowtie2 mapping index of spike-in standards
    conda:
        "Envs/bowtie2.yaml"
    output:
        "Mapping/{sample}_{fraction_label}/standards.sam"
    shell:
        """
        bowtie2 -x {params} -q -1 {input.down_R1_reads} -2 {input.down_R2_reads} -S {output} 
        """

rule sam_to_bam:
    input:
        "Mapping/{sample}_{fraction_label}/standards.sam"
    conda:
        "Envs/bowtie2.yaml"
    output:
        "Mapping/{sample}_{fraction_label}/standards.bam"
    shell:
        """
        samtools view -S -b {input} > {output}
        """

rule sort_bam:
    input:
        "Mapping/{sample}_{fraction_label}/standards.bam"
    conda:
        "Envs/bowtie2.yaml"
    output:
        "Mapping/{sample}_{fraction_label}/standards.sorted.bam"
    shell:
        """
        samtools sort {input} -o {output}
        samtools index {output}
        """

rule depth_bam:
    input:
        "Mapping/{sample}_{fraction_label}/standards.sorted.bam"
    params:
        "Map_Indexes/Langenfeld_2022_standards.fasta" ### Update with fasta file of spike-in standards
    conda:
        "Envs/bowtie2.yaml"
    output:
        "Mapping/{sample}_{fraction_label}/standards_depth.txt"
    shell:
        """
        samtools depth -a -H {input} --reference {params} > {output}
        """

rule organize:
    input:
        "Mapping/{sample}_{fraction_label}/standards_depth.txt"
    params:
        "Map_Indexes/Langenfeld_2022_standards.fasta" ### Update with fasta file of spike-in standards
    output:
        "Mapping/{sample}_{fraction_label}/standards_mapping.txt"
    shell:
        """
        python3 Scripts/organize_mapping.py -d {input} -f {params} -o {output
        """

rule sliding_window:
    input:
        "Mapping/{sample}_{fraction_label}/standards_mapping.txt"
    output:
        "Mapping/{sample}_{fraction_label}/standards_window49.txt"
    shell:
        """
        python3 Scripts/sliding_window.py -m {input} -o {output}
        """

